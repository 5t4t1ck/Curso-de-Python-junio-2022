---
title: "Intro Python"
subtitle: "REPL, operaciones matemáticas, Comentarios, Variables, Más de una Variable, Concatenación"
date: "today"
author: "Lic. Diego Medardo Saavedra García Mg. Sc."
lang: "es"
format:
  revealjs:
    incremental: true
    slide-number: true
    preview-links: auto
    logo: img/favicon-50x56.png
    css: styles.css
    footer: <https://abacom.edu.ec>
    theme: dark
    makeindex: true
    multiplex: true
    transition: fade
    chalkboard: false #Pizarra
    auto-stretch: false
  html: 
    code-fold: true
    html-math-method: katex
    multiplex: true
    transition: fade
    auto-stretch: false
    scrollable: true
editor: visual
execute: 
  echo: true
    
bibliography: Bibliografia.bib
csl: "https://raw.githubusercontent.com/citation-style-language/styles/master/apa.csl"
---

# Generalidades

## Instalación

Para realizar la instalación de Python es necesario tener en cuenta que existen algunas opciones.

En los sistemas operativos de la empresa Microsoft.

1.  Descarga e Instalación desde la página oficial.
2.  Descarga e Instalación desde la Tienda de Microsoft [@noauthor_4_nodate]
3.  Existen otras alternativas para el uso de Python.

## REPL - Python Interactive Shell

### ¿Qué es REPL?

Básicamente es el shell de python, un shell interactivo, el acrónimo REPL significa la abreviatura de: **R**ead, **E**val, **P**rint y **L**oop.

Este interprete se puede utilizar para comprobar de una forma sencilla algunos comando de Python. Para iniciar el interprete es necesario tecla el comando **python3** en una terminal (Gnu/Linux o Mac) o **python** en una consola según [@repl-p]

## 

El proceso que se utiliza es el siguiente.

1.  **Read**: Toma la entrada del usuario (input).
2.  **Eval**: Evalúa la entrada (input).
3.  **Print**: Muestra la salida del usuario (output).
4.  **Loop**: Repite el proceso.

## Un poco de matemáticas.

Con python es posible el desarrollo de operaciones matemáticas de forma sencilla, a continuación algunos ejemplos.

**Suma:**

```{python}
2+2
```
**Resta:**

```{python}
4-2
```

## 

**Multiplicación**

```{python}
4*2
```

**División:**

```{python}
4/2
```

**División Exacta:**

```{python}
4//2
```

## 

**Módulo:**

```{python}
4%2
```

**Potenciación:**

```{python}
4**2
```

## Comentarios.

Una buena práctica es el uso de comentarios para nosotros mismos o para otras personas.

Existe una frase que dice "Los buenos programadores crean código que spueden leer los humanos", (Anonimó).

Aunque la ejecución de código permite obtener una solución a un problema (bug) o la complementación de un feacture (características, funcionalidad), la mayor parte del tiempo los programadores **no escriben código**, y esto se debe a las **malas prácticas** de escritura de código.

##

Clean Code es una buena referencia para este punto, puesto que brinda las bases necesarias para tener que escribir código una sola vez, y sea fácil de mantener, así se puede dedicar tiempo a la creación de nuevos features o utilizar nuestro tiempo en otro tipo de actividades.

Una buena práctica es el uso de comentarios para nosotros mismos o para otras personas.

Existe una frase que dice "Los buenos programadores crean código que pueden leer los humanos", (Anonimó).

##

Aunque la ejecución de código permite obtener una solución a un problema (bug) o la complementación de un feacture (características, funcionalidad), la mayor parte del tiempo los programadores no escriben código, y esto se debe a las malas prácticas de escritura de código.

Clean Code es una buena referencia para este punto, puesto que brinda las bases necesarias para tener que escribir código una sola vez, y sea fácil de mantener, así se puede dedicar tiempo a la creación de nuevos features o utilizar nuestro tiempo en otro tipo de actividades.

## Formas de escribir comentarios.

-   Comentarios de media línea.

-   Comentarios de una línea.

-   Comentarios de varias líneas.

## Variables

Existen distintas formas de escribir variables, solo se debe tomar en cuenta algunos parámetros básicos para no tener inconvenientes.

### Qué **no** se debe hacer.

-   No escribir variables que empiecen con números.

-   No utilizar palabras reservadas.

-   No escribir variables de más de una palabra separadas

##

### Qué se debe hacer.

-   Escribir variables que tengan sentido.

-   Escribir variables que empiecen con un "\_"

-   Separar variables con un "\_".

-   Utilizar Camel Case.

## Ejemplos

Mal

```{python}
a = "Diego Saavedra"
```

Bien

```{python}
nombre = "Diego Saavedra"
```

## Referencias Bibliográficas.
